Medicine-Recognition-System

This Flask web application utilizes Google's Generative AI models to generate detailed medical descriptions for uploaded images. The project, which focuses on medical content generation, incorporates two key models: the Pro-Vision model for in-depth medical descriptions and the Pro model for additional content generation. Upon uploading an image, the application uses the Pro-Vision model to generate comprehensive medical descriptions, ensuring clinical accuracy. Additionally, a validation step with the Pro model ensures that the context is indeed related to the medical field. The user is provided with generated content on successful validation, while the interface prompts for a valid medical image otherwise. The project's user interaction includes uploading images through a simple web form, content generation based on the uploaded images, and a validation step to ensure medical relevance. To maintain security, the application loads the required Google API key from environment variables. Further improvements could involve enhanced error handling, a more user-friendly interface, and thorough documentation for future development and maintenance.

Built With:

 - Google-GenerativeAI
 - Flask

Getting Started:
This will help you understand how you may give instructions on setting up your project locally.
To get a local copy up and running follow these simple example steps.

Installation Steps:

1. Create a Virtual Environment (Optional but recommended)
   - It's a good practice to create a virtual environment to manage project dependencies. Run the following command:
     ```
     conda create -p <Environment_Name> python==<python version> -y
     ```

2. Activate the Virtual Environment (Optional)
   - Activate the virtual environment based on your operating system:
       ```
       conda activate <Environment_Name>/
       ```

3. Install Dependencies
   - Navigate to the project directory:
     ```
     cd [project_directory]
     ```
   - Run the following command to install project dependencies:
     ```
     pip install -r requirements.txt
     ```

4. Run the Project
   - Start the project by running the appropriate command.
     ```
     python app.py
     ```

5. Access the Project
   - Open a web browser or the appropriate client to access the project.<br>



   
API Key Setup:
To use this project, you need an API key from Google Gemini Large Language Model. Follow these steps to obtain and set up your API key:

1. Get API Key:
   - Visit Alkali App [Click Here](https://makersuite.google.com/app/apikey).
   - Follow the instructions to create an account and obtain your API key.

2. Set Up API Key:
   - Create a file named `.env` in the project root.
   - Add your API key to the `.env` file:
     ```dotenv
     GOOGLE_API_KEY=your_api_key_here
     ```

   Note:Keep your API key confidential. Do not share it publicly or expose it in your code.

